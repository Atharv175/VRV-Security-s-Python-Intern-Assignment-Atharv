import re
import csv
from collections import defaultdict, Counter
from jinja2 import Template
from datetime import datetime
from pptx import Presentation
from pptx.util import Inches, Pt

LOG_FILE = r"F:\Log_Analysis_Project\sample.log"
OUTPUT_CSV = r"F:\Log_Analysis_Project\log_analysis_results.csv"
REPORT_HTML = r"F:\Log_Analysis_Project\log_analysis_report.html"
FAILED_LOGIN_THRESHOLD = 10

# Function to parse the log file and extract information
def parse_log(file_path):
    ip_requests = Counter()
    endpoint_requests = Counter()
    failed_login_attempts = defaultdict(int)

    with open(file_path, 'r') as file:
        for line in file:
            # Extract IP address
            ip_match = re.match(r"(\d+\.\d+\.\d+\.\d+)", line)
            if not ip_match:
                continue
            ip = ip_match.group(1)

            # Count requests per IP
            ip_requests[ip] += 1

            # Extract endpoint and status code
            endpoint_match = re.search(r'"(?:GET|POST|PUT|DELETE) ([^ ]+) HTTP', line)
            status_code_match = re.search(r'" (\d{3}) ', line)
            if endpoint_match:
                endpoint = endpoint_match.group(1)
                endpoint_requests[endpoint] += 1

            # Check for failed login attempts (401 status)
            if status_code_match and int(status_code_match.group(1)) == 401:
                failed_login_attempts[ip] += 1

    return ip_requests, endpoint_requests, failed_login_attempts

# Generate an HTML report
def generate_html_report(ip_requests, most_accessed_endpoint, suspicious_ips, total_requests, unique_ips, current_date):
    with open('report_template.html', 'r') as file:
        template = Template(file.read())

    rendered_html = template.render(
        ip_requests=ip_requests,  # Pass the sorted list of tuples directly
        most_accessed_endpoint=most_accessed_endpoint,
        suspicious_ips=suspicious_ips,
        total_requests=total_requests,
        unique_ips=unique_ips,
        current_date=current_date
    )

    with open(REPORT_HTML, 'w') as output_file:
        output_file.write(rendered_html)

    print(f"HTML report generated: {REPORT_HTML}")



def generate_ppt(ip_requests, most_accessed_endpoint, suspicious_ips, total_requests, unique_ips):
    # Create a presentation
    ppt = Presentation()

    # Slide 1: Title Slide
    slide = ppt.slides.add_slide(ppt.slide_layouts[0])
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    title.text = "Log Analysis Report"
    subtitle.text = "Generated by Python Script"

    # Slide 2: Summary
    slide = ppt.slides.add_slide(ppt.slide_layouts[1])
    title = slide.shapes.title
    title.text = "Summary of Analysis"
    content = slide.placeholders[1]
    content.text = (
        f"Total Requests: {total_requests}\n"
        f"Unique IPs: {unique_ips}\n"
        f"Suspicious IPs Detected: {len(suspicious_ips)}"
    )

    # Slide 3: Requests per IP
    slide = ppt.slides.add_slide(ppt.slide_layouts[5])
    title = slide.shapes.title
    title.text = "Requests per IP Address"
    y_offset = 1.5
    for ip, count in ip_requests[:5]:  # Show top 5 IPs
        textbox = slide.shapes.add_textbox(Inches(1), Inches(y_offset), Inches(8), Inches(1))
        textbox.text_frame.text = f"{ip}: {count} requests"
        y_offset += 0.5

    # Slide 4: Most Accessed Endpoint
    slide = ppt.slides.add_slide(ppt.slide_layouts[1])
    title = slide.shapes.title
    title.text = "Most Accessed Endpoint"
    content = slide.placeholders[1]
    content.text = (
        f"Endpoint: {most_accessed_endpoint[0]}\n"
        f"Access Count: {most_accessed_endpoint[1]}"
    )

    # Slide 5: Suspicious Activity
    slide = ppt.slides.add_slide(ppt.slide_layouts[5])
    title = slide.shapes.title
    title.text = "Suspicious Activity Detected"
    if suspicious_ips:
        y_offset = 1.5
        for ip, count in suspicious_ips.items():
            textbox = slide.shapes.add_textbox(Inches(1), Inches(y_offset), Inches(8), Inches(1))
            textbox.text_frame.text = f"{ip}: {count} failed login attempts"
            y_offset += 0.5
    else:
        textbox = slide.shapes.add_textbox(Inches(1), Inches(1.5), Inches(8), Inches(1))
        textbox.text_frame.text = "No suspicious activity detected."

    # Save the presentation
    ppt_path = "F:\\Log_Analysis_Project\\log_analysis_report.pptx"
    ppt.save(ppt_path)
    print(f"PPT generated: {ppt_path}")






# Main function
def main():
    # Parse the log file
    ip_requests, endpoint_requests, failed_login_attempts = parse_log(LOG_FILE)

    # Analyze data
    sorted_ip_requests = sorted(ip_requests.items(), key=lambda x: x[1], reverse=True)
    most_accessed_endpoint = endpoint_requests.most_common(1)[0]
    suspicious_ips = {ip: count for ip, count in failed_login_attempts.items() if count > FAILED_LOGIN_THRESHOLD}
    total_requests = sum(ip_requests.values())
    unique_ips = len(ip_requests)
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    # Display results in the terminal
    print("Requests per IP Address:")
    for ip, count in sorted_ip_requests:
        print(f"{ip:<20} {count}")

    print("\nMost Frequently Accessed Endpoint:")
    print(f"{most_accessed_endpoint[0]} (Accessed {most_accessed_endpoint[1]} times)")

    print("\nSuspicious Activity Detected:")
    if suspicious_ips:
        for ip, count in suspicious_ips.items():
            print(f"{ip:<20} {count} failed login attempts")
    else:
        print("No suspicious activity detected.")

    # Save results to CSV
    with open(OUTPUT_CSV, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile)
        writer.writerow(["IP Address", "Request Count"])
        writer.writerows(sorted_ip_requests)
        writer.writerow([])
        writer.writerow(["Most Accessed Endpoint", "Access Count"])
        writer.writerow([most_accessed_endpoint[0], most_accessed_endpoint[1]])
        writer.writerow([])
        writer.writerow(["Suspicious Activity (IP Address, Failed Login Attempts)"])
        writer.writerows(suspicious_ips.items())

    print(f"Results saved to {OUTPUT_CSV}")

    # Generate HTML report
    generate_html_report(sorted_ip_requests, most_accessed_endpoint, suspicious_ips, total_requests, unique_ips, current_date)
    generate_ppt(sorted_ip_requests, most_accessed_endpoint, suspicious_ips, total_requests, unique_ips)


if __name__ == "__main__":
    main()
